---
import MainHead from '../../components/MainHead.astro';
import Nav from '../../components/Nav.astro';
import PostPreview from '../../components/PostPreview.astro';
import Pagination from '../../components/Pagination.astro';

// page
let title = 'Don’s Blog';
let description = 'An example blog on Astro';
let canonicalURL = Astro.request.canonicalURL;

// collection
import authorData from '../../data/authors.json';
export async function getStaticPaths({paginate, rss}) {
  const allPosts = Astro.fetchContent('../post/*.md');
  const sortedPosts = allPosts.sort((a, b) => new Date(b.date) - new Date(a.date));
  // Generate an RSS feed from this collection
  // TODO: DONT MERGE: This requires buildOptions.site to be set, which can't be set in a template
  rss({
    title: 'Don’s Blog',
    description: 'An example blog on Astro',
    customData: `<language>en-us</language>`,
    items: sortedPosts.map(item => ({
      title: item.title,
      description: item.description,
      link: item.url,
      pubDate: item.date,
    })),
  });
  // Return a paginated collection of paths for all posts
  return paginate(sortedPosts, {pageSize: 1});
}

const { page } = Astro.props;
---

<html lang="en">
  <head>
    <title>{title}</title>
    <MainHead
      title={title}
      description={description}
      image={page.data[0].image}
      canonicalURL={canonicalURL}
      prev={page.url.prev}
      next={page.url.next}
    />

  </head>

  <body>
    <Nav title={title} />

      <div class="relative bg-gray-50 pt-16 pb-20 px-4 sm:px-6 lg:pt-24 lg:pb-28 lg:px-8">
        <div class="absolute inset-0">
          <div class="bg-white h-1/3 sm:h-2/3"></div>
        </div>
        <div class="relative max-w-7xl mx-auto">
          <div class="text-center">
            <h2 class="text-3xl tracking-tight font-extrabold text-gray-900 sm:text-4xl">
              All posts
            </h2>
            <small class="count">{page.start + 1}–{page.end + 1} of {page.total}</small>
          </div>
          <div class="mt-12 max-w-lg mx-auto grid gap-5 lg:grid-cols-3 lg:max-w-none">
              {page.data.map((post) => <PostPreview post={post} author={authorData[post.author]} />)}
          </div>
        </div>
      </div>

    <footer>
      <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
    </footer>
  </body>
</html>
